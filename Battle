import java.util.Random;
import java.util.Scanner;



public class Battle {
    EnemyList enemyList = new EnemyList();
    int playerhealth;
    int enemyhealth;
    int enemyindex;
    double tempdamage;
    int input;
    Random random = new Random();
    Scanner scanner = new Scanner(System.in);
    
    Battle(Player p, int area, boolean boss)
    {
        playerhealth    = setplayerhealth(p);
        enemyindex      = enemyList.enmemyNumber(area, boss);
        enemyhealth     = setenemyhealth(enemyindex);

        while (playerhealth <= 0 || enemyhealth <= 0)
        {
            System.out.println("Player HP: " + playerhealth);
            System.out.println(enemyList.getEnemy(enemyindex).getName() + " HP: " + playerhealth);
            System.out.println("1: Physical Attack\n2: Sorcery Attack\n3: Incantation Attack\n4: Dodge");
            input = scanner.nextInt();

            switch (input) {
                case 1:
                    tempdamage = phyattack(p, enemyindex);
                    System.out.println("You Used Physical Attack and dealt: " + tempdamage + " Damage");
                    enemyhealth = enemyhealth - (int)tempdamage;
                    break;
                case 2:
                    tempdamage = sorattack(p, enemyindex);
                    System.out.println("You Used Sorcery Attack and dealt: " + tempdamage + " Damage");
                    enemyhealth = enemyhealth - (int)tempdamage;
                    break;
                case 3:
                    tempdamage = incattack(p, enemyindex);
                    System.out.println("You Used Incantation Attack and dealt: " + tempdamage + " Damage"); 
                    enemyhealth = enemyhealth - (int)tempdamage;   
                    break;
                case 4:
                    if (dodge(p) == false)
                    {
                        System.out.println("You failed to dodge and got hit!");
                        tempdamage = enemyattack(enemyindex, boss);
                        System.out.println("You received " + tempdamage + " Damage");
                        playerhealth = playerhealth - (int)tempdamage;
                    }
                    else
                    {
                        System.out.println("You dodged their attack!");
                    }
                    break;
                default:
                    System.out.println("We gave you a list why would you choose something else?");
                    break;
            }
            if (input < 4 || input > 0)
            {
                tempdamage = enemyattack(enemyindex, boss);
                System.out.println("You received " + tempdamage + " Damage");
                playerhealth = playerhealth - (int)tempdamage;
            }
        }
        
        if (playerhealth <= 0)
        {
            System.out.println("You lost!");
        }
        else if (enemyhealth <= 0)
        {
            System.out.println("Congrats you won! \nPlus Runes: " + calcuRunes(enemyindex, boss));
            p.addrunes(calcuRunes(enemyindex, boss));
        }
    }



    public int setplayerhealth (Player p)
    {
        int health = 100 * ((p.getHP() + p.getEWeapon().getHP())/2);
        return health;
    }

    public double phyattack (Player p, int i)
    {
        double attack = ((p.getSTR() + p.getEWeapon().getSTR()) * (1 - enemyList.getEnemy(i).getphyDef()));
        return attack;
    }

    public double sorattack (Player p, int i)
    {
        double attack = ((p.getINT() + p.getEWeapon().getINT()) * (1 - enemyList.getEnemy(i).getsorDef()));
        return attack;
    }

    public double incattack (Player p, int i)
    {
        double attack = ((p.getFTH() + p.getEWeapon().getFTH()) * (1 - enemyList.getEnemy(i).getincDef()));
        return attack;
    }

    public boolean dodge (Player p)
    {
        boolean dodged;
        double dodgerate =        ((20+((p.getEND()+p.getEWeapon().getEND())/2))/100);

        double hit = random.nextInt(100);

        if (dodgerate >= hit)
        {
            dodged = true;
        }
        else
        {
            dodged = false;
        }

        return dodged;
    }




    public int setenemyhealth (int i)
    {
        int health;
            if(enemyList.getEnemy(i).getHighHealth() != enemyList.getEnemy(i).getLowHealth())
            {
                health = random.nextInt((enemyList.getEnemy(i).getHighHealth()+1)-enemyList.getEnemy(i).getLowHealth()) + enemyList.getEnemy(i).getLowHealth();
            }
            else
            {
                health = enemyList.getEnemy(i).getHighHealth();
            }
        return health;
    }

    public int enemyattack (int i, boolean dodge)
    {
        int attack;
        if (dodge == true)
        {
            attack = 0;
        }
        else
        {
            attack = random.nextInt((enemyList.getEnemy(i).getHighAttack()+1)-enemyList.getEnemy(i).getLowAttack()) + enemyList.getEnemy(i).getLowAttack();
        }
        return attack;
    }

    public int calcuRunes (int i, boolean isBoss)
    {
        int rune;
        if (isBoss == true)
        {
            rune = enemyList.getEnemy(i).getHighHealth() * 5;
        }
        else
        {
            rune = enemyList.getEnemy(i).getHighHealth() * 2;
        }

        return rune;
    }

    
    public String EnemyDetails(int area, boolean boss)
    {
        int num = enemyList.enmemyNumber(area, boss);
        String returnText = "\tNAME: " + enemyList.getEnemy(num).getName() + " \tTYPE: " + enemyList.getEnemy(num).getType() + "\n\tAREA: " + enemyList.getEnemy(num).getArea() + " \tAREA NAME: " + enemyList.getEnemy(num).getAreaname()
        + "\n\tLOW HEALTH: " + enemyList.getEnemy(num).getLowHealth() + " \tHIGH HEALTH: " + enemyList.getEnemy(num).getHighHealth() + "\n\tLOW ATTACK: " + enemyList.getEnemy(num).getLowAttack() + " \tHIGH ATTACK: " + enemyList.getEnemy(num).getHighAttack()
        + "\n\tPHYSICAL DEFENCE: " + enemyList.getEnemy(num).getphyDef() + "\n\tSORCERY DEFENCE: " + enemyList.getEnemy(num).getsorDef() + "\n\tINCANTATION DEFENCE: " + enemyList.getEnemy(num).getincDef() ;

        return returnText;
    }

}
